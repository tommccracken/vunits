import{B as e,o as t,c as i,a as n,w as a,v as s,F as r,r as l,b as o,t as u,d as p,e as c,f as b,g as d}from"./vendor.0a411d08.js";!function(e=".",t="__import__"){try{self[t]=new Function("u","return import(u)")}catch(i){const n=new URL(e,location),a=e=>{URL.revokeObjectURL(e.src),e.remove()};self[t]=e=>new Promise(((i,s)=>{const r=new URL(e,n);if(self[t].moduleMap[r])return i(self[t].moduleMap[r]);const l=new Blob([`import * as m from '${r}';`,`${t}.moduleMap['${r}']=m;`],{type:"text/javascript"}),o=Object.assign(document.createElement("script"),{type:"module",src:URL.createObjectURL(l),onerror(){s(new Error(`Failed to import: ${e}`)),a(o)},onload(){i(self[t].moduleMap[r]),a(o)}});document.head.appendChild(o)})),self[t].moduleMap={}}}("/assets/");var m={quantities:{length:{"base-unit":"metre",units:{metre:{"base-factor":"1",symbol:"m",reference:"https://en.wikipedia.org/wiki/Metre"},millimeter:{"base-factor":"0.001",symbol:"mm",reference:"https://en.wikipedia.org/wiki/Millimetre"},kilometer:{"base-factor":"1000",symbol:"km",reference:"https://en.wikipedia.org/wiki/Kilometre"},inch:{"base-factor":"0.0254",symbol:"in",reference:"https://en.wikipedia.org/wiki/Inch"},feet:{"base-factor":"0.3048",symbol:"ft",reference:"https://en.wikipedia.org/wiki/Foot_(unit)"},mile:{"base-factor":"1609.344",symbol:"mi",reference:"https://en.wikipedia.org/wiki/Mile"},yard:{"base-factor":"0.9144",symbol:"yd",reference:"https://en.wikipedia.org/wiki/Yard"}}},mass:{"base-unit":"kilogram",units:{kilogram:{"base-factor":1,symbol:"kg",reference:"https://en.wikipedia.org/wiki/Kilogram"},gram:{"base-factor":"0.001",symbol:"g",reference:"https://simple.wikipedia.org/wiki/Gram"},milligram:{"base-factor":"0.000001",symbol:"mg",reference:"https://en.wikipedia.org/wiki/Kilogram#SI_multiples"},pound:{"base-factor":"0.45359237",symbol:"lb",reference:"https://en.wikipedia.org/wiki/Pound_(mass)"},tonne:{"base-factor":"1000",symbol:"t",reference:"https://en.wikipedia.org/wiki/Tonne"},"short ton":{"base-factor":"907.18474",symbol:"t (short)",reference:"1 short ton is equivalent to 2,000 lbs, https://en.wikipedia.org/wiki/Ton, https://en.wikipedia.org/wiki/Pound_(mass)"},"long ton":{"base-factor":"1016.0469088",symbol:"t (long)",reference:"1 long ton is equivalent to 2,240 lbs, https://en.wikipedia.org/wiki/Ton, https://en.wikipedia.org/wiki/Pound_(mass)"},ounce:{"base-factor":"0.028349523125",symbol:"oz",reference:"https://en.wikipedia.org/wiki/Ounce"},grain:{"base-factor":"0.00006479891",symbol:"gr",reference:"https://en.wikipedia.org/wiki/Grain_(unit)"}}},pressure:{"base-unit":"Pascal",units:{Pascal:{"base-factor":"1",symbol:"Pa",reference:"https://en.wikipedia.org/wiki/Pascal_(unit)"},kilopascal:{"base-factor":"1000",symbol:"kPa",reference:"https://en.wikipedia.org/wiki/Pascal_(unit)"},"pound-force per square inch":{"base-factor":"0.00689475729316836",symbol:"psi",reference:"https://en.wikipedia.org/wiki/Pounds_per_square_inch"},"standard atmosphere":{"base-factor":"101325",symbol:"atm",reference:"https://en.wikipedia.org/wiki/Standard_atmosphere_(unit)"},bar:{"base-factor":"100000",symbol:"bar",reference:"https://en.wikipedia.org/wiki/Bar_(unit)"},decapascal:{"base-factor":"10",symbol:"daPa",reference:"https://en.wikipedia.org/wiki/Pascal_(unit)"},hectopascal:{"base-factor":"100",symbol:"hPa",reference:"https://en.wikipedia.org/wiki/Pascal_(unit)"},megapascal:{"base-factor":"1000000",symbol:"MPa",reference:"https://en.wikipedia.org/wiki/Pascal_(unit)"},gigapascal:{"base-factor":"1000000000",symbol:"GPa",reference:"https://en.wikipedia.org/wiki/Pascal_(unit)"},therapascal:{"base-factor":"1000000000000",symbol:"TPa",reference:"https://en.wikipedia.org/wiki/Pascal_(unit)"},petapascal:{"base-factor":"1000000000000000",symbol:"PPa",reference:"https://en.wikipedia.org/wiki/Pascal_(unit)"},exapascal:{"base-factor":"1000000000000000000",symbol:"EPa",reference:"https://en.wikipedia.org/wiki/Pascal_(unit)"},zettapascal:{"base-factor":"1000000000000000000000",symbol:"ZPa",reference:"https://en.wikipedia.org/wiki/Pascal_(unit)"},iottapascal:{"base-factor":"1000000000000000000000000",symbol:"IPa",reference:"https://en.wikipedia.org/wiki/Pascal_(unit)"},"millimetre of water":{"base-factor":"9.8063754138",symbol:"mmH₂O",reference:"https://en.wikipedia.org/wiki/Centimetre_or_millimetre_of_water"},"centimetre of water":{"base-factor":"98.063754138",symbol:"cmH₂O",reference:"https://en.wikipedia.org/wiki/Centimetre_or_millimetre_of_water"},"metre of water":{"base-factor":"9806.3754138",symbol:"mH₂O",reference:"https://en.wikipedia.org/wiki/Centimetre_or_millimetre_of_water"}}}}};function f(){let e=[];for(let t in m.quantities)e.push(t);return e}function h(e){let t=[];try{for(let i in m.quantities[e].units)t.push(i);return t}catch(i){}}function w(e){return m.quantities[e]["base-unit"]}function k(e,t){return m.quantities[e].units[t].symbol}function g(e,t,i,n){return y(e,t,i).prec(n)}function y(t,i,n){try{return new e(m.quantities[t].units[i]["base-factor"]).div(new e(m.quantities[t].units[n]["base-factor"]))}catch(a){console.error(a+" - Confirm that the quantity, fromUnit and toUnit are valid"),void 0===m.quantities[t]?console.log("Invalid quantity"):(void 0===m.quantities[t].units[i]&&console.log("Invalid input units"),void 0===m.quantities[t].units[n]&&console.log("Invalid output units"))}}function v(t,i,n,a,s){return function(t,i,n,a){try{return new e(t).mul(y(i,n,a))}catch(s){console.error(s+" - Confirm that the input value is valid"),isNaN(t)&&console.log("Invalid input value")}}(t,i,n,a).prec(s)}function U(e,t){return{"base-factor":m.quantities[e].units[t]["base-factor"],symbol:m.quantities[e].units[t].symbol,reference:m.quantities[e].units[t].reference}}e.RM=1,e.DP=30;const _={data:()=>({quantity:"length",inputUnit:"",inputUnitSymbol:"",outputUnitSymbol:"",outputUnit:"",inputValue:"1.0",outputValue:"",quantities:f(),inputUnits:"",outputUnits:"",baseUnit:""}),methods:{updateUnitSelectOptions(){this.inputUnits=h(this.quantity),this.inputUnit=this.inputUnits[0],this.outputUnits=h(this.quantity),this.outputUnit=this.outputUnits[0],this.baseUnit=w(this.quantity),this.convertInput()},updateUnitSymbols(){this.inputUnitSymbol=k(this.quantity,this.inputUnit),this.outputUnitSymbol=k(this.quantity,this.outputUnit)},getConversionFactor:(e,t,i)=>g(e,t,i,20),isValidInputValue(){return!isNaN(Number(this.inputValue))&&""!==this.inputValue&&!/\s/.test(this.inputValue)},getConversionBasis(e,t,i){let n="";return t!==i&&(n=n+"1 "+k(e,t)+" is equivalent to "+g(e,t,i,20)+" "+k(e,i)+" based on the following:",t!==w(e)&&(n=n+"\n\nInput unit ("+t+") to base unit ("+w(e)+") conversion factor: "+U(e,t)["base-factor"]+"\nReference: "+U(e,t).reference),i!==w(e)&&(n=n+"\n\nOutput unit ("+i+") to base unit ("+w(e)+") conversion factor: "+U(e,i)["base-factor"]+"\nReference: "+U(e,i).reference),t!==w(e)&&i!==w(e)&&(n=n+"\n\nTherefore calculated conversion factor = \n"+U(e,t)["base-factor"]+" / "+U(e,i)["base-factor"]+" = "+g(e,t,i,20)),n+="\n\nWhere required, output values and calculated conversion factors are rounded to 20 significant figures"),n},convertInput(){this.isValidInputValue()&&(this.updateUnitSymbols(),this.outputValue=v(this.inputValue,this.quantity,this.inputUnit,this.outputUnit,20))}},mounted(){this.updateUnitSelectOptions(),this.updateUnitSymbols()}},q=n("label",null,[n("b",null,"Conversion quantity")],-1),P=n("br",null,null,-1),I=n("br",null,null,-1),V=n("br",null,null,-1),C=n("label",null,[n("b",null,"Input units")],-1),O=n("br",null,null,-1),S=n("br",null,null,-1),x=n("br",null,null,-1),M=n("label",null,[n("b",null,"Output units")],-1),R=n("br",null,null,-1),T=n("br",null,null,-1),N=n("br",null,null,-1),j=n("label",null,[n("b",null,"Input value")],-1),F=n("br",null,null,-1),B=n("br",null,null,-1),L=n("br",null,null,-1),A=n("label",null,[n("b",null,"Output value")],-1),E=n("br",null,null,-1),H={key:0},K={key:1},$=n("br",null,null,-1),D={key:2},G=n("br",null,null,-1),z=n("label",null,[n("b",null,"Basis")],-1),W={class:"whitespace-pre-wrap text-xs"};_.render=function(e,c,b,d,m,f){return t(),i("div",null,[n("form",null,[q,P,a(n("select",{"onUpdate:modelValue":c[1]||(c[1]=e=>m.quantity=e),onChange:c[2]||(c[2]=e=>f.updateUnitSelectOptions()),class:"w-40"},[(t(!0),i(r,null,l(m.quantities,(e=>(t(),i("option",null,u(e),1)))),256))],544),[[s,m.quantity]]),I,V,C,O,a(n("select",{"onUpdate:modelValue":c[3]||(c[3]=e=>m.inputUnit=e),onChange:c[4]||(c[4]=e=>f.convertInput()),class:"w-40"},[(t(!0),i(r,null,l(m.inputUnits,(e=>(t(),i("option",null,u(e),1)))),256))],544),[[s,m.inputUnit]]),S,x,M,R,a(n("select",{"onUpdate:modelValue":c[5]||(c[5]=e=>m.outputUnit=e),onChange:c[6]||(c[6]=e=>f.convertInput()),class:"w-40"},[(t(!0),i(r,null,l(m.outputUnits,(e=>(t(),i("option",null,u(e),1)))),256))],544),[[s,m.outputUnit]]),T,N,j,F,a(n("input",{"onUpdate:modelValue":c[7]||(c[7]=e=>m.inputValue=e),type:"text",onInput:c[8]||(c[8]=e=>f.convertInput()),class:"w-40"},null,544),[[o,m.inputValue]]),B,L,A,E,this.isValidInputValue()?(t(),i("label",H,u(m.outputValue+" "+m.outputUnitSymbol),1)):(t(),i("label",K,"Invalid input value")),$,this.inputUnit!==this.outputUnit&&this.isValidInputValue()?(t(),i("div",D,[G,z,n("p",W,u(f.getConversionBasis(this.quantity,this.inputUnit,this.outputUnit)),1)])):p("",!0)])])};const Y=c('<div id="Header" class="w-full pt-8 pb-8"><h1 class="text-6xl">VUNITS</h1><br><p> A experimental unit converter project aimed at experimenting with <a href="https://vuejs.org" class="underline">Vue</a>, <a href="https://vitejs.dev" class="underline">Vite</a> and <a href="https://tailwindcss.com" class="underline">Tailwind</a>. Don&#39;t use for anything serious. </p></div>',1),Z={id:"Content",class:"bg-gray-200 rounded-md shadow-xl max-w-2xl pt-8 pb-8 w-full flex-col"},J=n("div",{id:"Footer",class:"w-full pt-8 pb-8"},[n("p",null,[b(" This website and the code that it is based on is stored in "),n("a",{href:"https://github.com/tommccracken/vunits",class:"underline"},"this"),b(" repository and licensed under the MIT license. "),n("br"),b("NO WARRANTIES OF ANY KIND. ")]),n("br"),n("p",null,[b(" Made with ❤️ and ☕ by "),n("a",{href:"https://tommccracken.net",class:"underline"},"Tom McCracken")]),n("p",null,"© Copyright 2021")],-1);d({expose:[],setup:e=>(e,a)=>(t(),i(r,null,[Y,n("div",Z,[n(_)]),J],64))}).mount("#app");
